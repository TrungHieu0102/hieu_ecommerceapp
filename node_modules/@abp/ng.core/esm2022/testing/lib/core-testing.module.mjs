import { BaseCoreModule, coreOptionsFactory, CORE_OPTIONS, LIST_QUERY_DEBOUNCE_TIME, LOADER_DELAY, PermissionService, RestService, INCUDE_LOCALIZATION_RESOURCES_TOKEN, } from '@abp/ng.core';
import { APP_BASE_HREF } from '@angular/common';
import { NgModule } from '@angular/core';
import { NoopAnimationsModule } from '@angular/platform-browser/animations';
import { provideRoutes } from '@angular/router';
import { RouterTestingModule } from '@angular/router/testing';
import { MockPermissionService } from './services/mock-permission.service';
import { MockRestService } from './services/mock-rest.service';
import * as i0 from "@angular/core";
/**
 * CoreTestingModule is the module that will be used in tests
 * and it provides mock alternatives
 */
class CoreTestingModule {
    static withConfig({ baseHref = '/', listQueryDebounceTime = 0, routes = [], ...options } = {}) {
        return {
            ngModule: CoreTestingModule,
            providers: [
                { provide: APP_BASE_HREF, useValue: baseHref },
                {
                    provide: 'CORE_OPTIONS',
                    useValue: {
                        skipGetAppConfiguration: true,
                        ...options,
                    },
                },
                {
                    provide: CORE_OPTIONS,
                    useFactory: coreOptionsFactory,
                    deps: ['CORE_OPTIONS'],
                },
                {
                    provide: LIST_QUERY_DEBOUNCE_TIME,
                    useValue: listQueryDebounceTime,
                },
                {
                    provide: PermissionService,
                    useClass: MockPermissionService,
                },
                {
                    provide: RestService,
                    useClass: MockRestService,
                },
                {
                    provide: LOADER_DELAY,
                    useValue: 0,
                },
                {
                    provide: INCUDE_LOCALIZATION_RESOURCES_TOKEN,
                    useValue: false,
                },
                provideRoutes(routes),
            ],
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.6", ngImport: i0, type: CoreTestingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.0.6", ngImport: i0, type: CoreTestingModule, imports: [NoopAnimationsModule, RouterTestingModule, BaseCoreModule], exports: [RouterTestingModule, BaseCoreModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.0.6", ngImport: i0, type: CoreTestingModule, imports: [NoopAnimationsModule, RouterTestingModule, BaseCoreModule, RouterTestingModule, BaseCoreModule] }); }
}
export { CoreTestingModule };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.6", ngImport: i0, type: CoreTestingModule, decorators: [{
            type: NgModule,
            args: [{
                    exports: [RouterTestingModule, BaseCoreModule],
                    imports: [NoopAnimationsModule, RouterTestingModule, BaseCoreModule],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS10ZXN0aW5nLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvdGVzdGluZy9zcmMvbGliL2NvcmUtdGVzdGluZy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLGNBQWMsRUFDZCxrQkFBa0IsRUFDbEIsWUFBWSxFQUNaLHdCQUF3QixFQUN4QixZQUFZLEVBQ1osaUJBQWlCLEVBQ2pCLFdBQVcsRUFDWCxtQ0FBbUMsR0FDcEMsTUFBTSxjQUFjLENBQUM7QUFDdEIsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2hELE9BQU8sRUFBdUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUMzRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sOEJBQThCLENBQUM7O0FBRS9EOzs7R0FHRztBQUNILE1BSWEsaUJBQWlCO0lBQzVCLE1BQU0sQ0FBQyxVQUFVLENBQ2YsRUFBRSxRQUFRLEdBQUcsR0FBRyxFQUFFLHFCQUFxQixHQUFHLENBQUMsRUFBRSxNQUFNLEdBQUcsRUFBRSxFQUFFLEdBQUcsT0FBTyxLQUFLLEVBQWM7UUFFdkYsT0FBTztZQUNMLFFBQVEsRUFBRSxpQkFBaUI7WUFDM0IsU0FBUyxFQUFFO2dCQUNULEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFO2dCQUM5QztvQkFDRSxPQUFPLEVBQUUsY0FBYztvQkFDdkIsUUFBUSxFQUFFO3dCQUNSLHVCQUF1QixFQUFFLElBQUk7d0JBQzdCLEdBQUcsT0FBTztxQkFDWDtpQkFDRjtnQkFDRDtvQkFDRSxPQUFPLEVBQUUsWUFBWTtvQkFDckIsVUFBVSxFQUFFLGtCQUFrQjtvQkFDOUIsSUFBSSxFQUFFLENBQUMsY0FBYyxDQUFDO2lCQUN2QjtnQkFDRDtvQkFDRSxPQUFPLEVBQUUsd0JBQXdCO29CQUNqQyxRQUFRLEVBQUUscUJBQXFCO2lCQUNoQztnQkFDRDtvQkFDRSxPQUFPLEVBQUUsaUJBQWlCO29CQUMxQixRQUFRLEVBQUUscUJBQXFCO2lCQUNoQztnQkFDRDtvQkFDRSxPQUFPLEVBQUUsV0FBVztvQkFDcEIsUUFBUSxFQUFFLGVBQWU7aUJBQzFCO2dCQUNEO29CQUNFLE9BQU8sRUFBRSxZQUFZO29CQUNyQixRQUFRLEVBQUUsQ0FBQztpQkFDWjtnQkFDRDtvQkFDRSxPQUFPLEVBQUUsbUNBQW1DO29CQUM1QyxRQUFRLEVBQUUsS0FBSztpQkFDaEI7Z0JBQ0QsYUFBYSxDQUFDLE1BQU0sQ0FBQzthQUN0QjtTQUNGLENBQUM7SUFDSixDQUFDOzhHQTNDVSxpQkFBaUI7K0dBQWpCLGlCQUFpQixZQUZsQixvQkFBb0IsRUFBRSxtQkFBbUIsRUFBRSxjQUFjLGFBRHpELG1CQUFtQixFQUFFLGNBQWM7K0dBR2xDLGlCQUFpQixZQUZsQixvQkFBb0IsRUFBRSxtQkFBbUIsRUFBRSxjQUFjLEVBRHpELG1CQUFtQixFQUFFLGNBQWM7O1NBR2xDLGlCQUFpQjsyRkFBakIsaUJBQWlCO2tCQUo3QixRQUFRO21CQUFDO29CQUNSLE9BQU8sRUFBRSxDQUFDLG1CQUFtQixFQUFFLGNBQWMsQ0FBQztvQkFDOUMsT0FBTyxFQUFFLENBQUMsb0JBQW9CLEVBQUUsbUJBQW1CLEVBQUUsY0FBYyxDQUFDO2lCQUNyRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQUJQLFxyXG4gIEJhc2VDb3JlTW9kdWxlLFxyXG4gIGNvcmVPcHRpb25zRmFjdG9yeSxcclxuICBDT1JFX09QVElPTlMsXHJcbiAgTElTVF9RVUVSWV9ERUJPVU5DRV9USU1FLFxyXG4gIExPQURFUl9ERUxBWSxcclxuICBQZXJtaXNzaW9uU2VydmljZSxcclxuICBSZXN0U2VydmljZSxcclxuICBJTkNVREVfTE9DQUxJWkFUSU9OX1JFU09VUkNFU19UT0tFTixcclxufSBmcm9tICdAYWJwL25nLmNvcmUnO1xyXG5pbXBvcnQgeyBBUFBfQkFTRV9IUkVGIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTm9vcEFuaW1hdGlvbnNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyL2FuaW1hdGlvbnMnO1xyXG5pbXBvcnQgeyBwcm92aWRlUm91dGVzIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHsgUm91dGVyVGVzdGluZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlci90ZXN0aW5nJztcclxuaW1wb3J0IHsgTW9ja1Blcm1pc3Npb25TZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9tb2NrLXBlcm1pc3Npb24uc2VydmljZSc7XHJcbmltcG9ydCB7IE1vY2tSZXN0U2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvbW9jay1yZXN0LnNlcnZpY2UnO1xyXG5cclxuLyoqXHJcbiAqIENvcmVUZXN0aW5nTW9kdWxlIGlzIHRoZSBtb2R1bGUgdGhhdCB3aWxsIGJlIHVzZWQgaW4gdGVzdHNcclxuICogYW5kIGl0IHByb3ZpZGVzIG1vY2sgYWx0ZXJuYXRpdmVzXHJcbiAqL1xyXG5ATmdNb2R1bGUoe1xyXG4gIGV4cG9ydHM6IFtSb3V0ZXJUZXN0aW5nTW9kdWxlLCBCYXNlQ29yZU1vZHVsZV0sXHJcbiAgaW1wb3J0czogW05vb3BBbmltYXRpb25zTW9kdWxlLCBSb3V0ZXJUZXN0aW5nTW9kdWxlLCBCYXNlQ29yZU1vZHVsZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDb3JlVGVzdGluZ01vZHVsZSB7XHJcbiAgc3RhdGljIHdpdGhDb25maWcoXHJcbiAgICB7IGJhc2VIcmVmID0gJy8nLCBsaXN0UXVlcnlEZWJvdW5jZVRpbWUgPSAwLCByb3V0ZXMgPSBbXSwgLi4ub3B0aW9ucyB9ID0ge30gYXMgQUJQLlRlc3QsXHJcbiAgKTogTW9kdWxlV2l0aFByb3ZpZGVyczxDb3JlVGVzdGluZ01vZHVsZT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbmdNb2R1bGU6IENvcmVUZXN0aW5nTW9kdWxlLFxyXG4gICAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICB7IHByb3ZpZGU6IEFQUF9CQVNFX0hSRUYsIHVzZVZhbHVlOiBiYXNlSHJlZiB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHByb3ZpZGU6ICdDT1JFX09QVElPTlMnLFxyXG4gICAgICAgICAgdXNlVmFsdWU6IHtcclxuICAgICAgICAgICAgc2tpcEdldEFwcENvbmZpZ3VyYXRpb246IHRydWUsXHJcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcHJvdmlkZTogQ09SRV9PUFRJT05TLFxyXG4gICAgICAgICAgdXNlRmFjdG9yeTogY29yZU9wdGlvbnNGYWN0b3J5LFxyXG4gICAgICAgICAgZGVwczogWydDT1JFX09QVElPTlMnXSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHByb3ZpZGU6IExJU1RfUVVFUllfREVCT1VOQ0VfVElNRSxcclxuICAgICAgICAgIHVzZVZhbHVlOiBsaXN0UXVlcnlEZWJvdW5jZVRpbWUsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBwcm92aWRlOiBQZXJtaXNzaW9uU2VydmljZSxcclxuICAgICAgICAgIHVzZUNsYXNzOiBNb2NrUGVybWlzc2lvblNlcnZpY2UsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBwcm92aWRlOiBSZXN0U2VydmljZSxcclxuICAgICAgICAgIHVzZUNsYXNzOiBNb2NrUmVzdFNlcnZpY2UsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBwcm92aWRlOiBMT0FERVJfREVMQVksXHJcbiAgICAgICAgICB1c2VWYWx1ZTogMCxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHByb3ZpZGU6IElOQ1VERV9MT0NBTElaQVRJT05fUkVTT1VSQ0VTX1RPS0VOLFxyXG4gICAgICAgICAgdXNlVmFsdWU6IGZhbHNlLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcHJvdmlkZVJvdXRlcyhyb3V0ZXMpLFxyXG4gICAgICBdLFxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIl19