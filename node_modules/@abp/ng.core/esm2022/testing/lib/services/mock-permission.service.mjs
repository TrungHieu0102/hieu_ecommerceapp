import { ConfigStateService, PermissionService } from '@abp/ng.core';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@abp/ng.core";
class MockPermissionService extends PermissionService {
    constructor(configState) {
        super(configState);
        this.configState = configState;
        this.grantAllPolicies();
    }
    grantAllPolicies() {
        const grantedPolicies = new Proxy({}, {
            get() {
                return true;
            },
        });
        this.configState['store'].deepPatch({ auth: { grantedPolicies } });
    }
    grantPolicies(keys) {
        const grantedPolicies = keys.reduce((policies, key) => {
            policies[key] = true;
            return policies;
        }, {});
        this.configState['store'].deepPatch({ auth: { grantedPolicies } });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.6", ngImport: i0, type: MockPermissionService, deps: [{ token: i1.ConfigStateService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.6", ngImport: i0, type: MockPermissionService, providedIn: 'root' }); }
}
export { MockPermissionService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.6", ngImport: i0, type: MockPermissionService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.ConfigStateService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1wZXJtaXNzaW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3Rlc3Rpbmcvc3JjL2xpYi9zZXJ2aWNlcy9tb2NrLXBlcm1pc3Npb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDckUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBRTNDLE1BR2EscUJBQXNCLFNBQVEsaUJBQWlCO0lBQzFELFlBQXNCLFdBQStCO1FBQ25ELEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztRQURDLGdCQUFXLEdBQVgsV0FBVyxDQUFvQjtRQUVuRCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQsZ0JBQWdCO1FBQ2QsTUFBTSxlQUFlLEdBQUcsSUFBSSxLQUFLLENBQy9CLEVBQUUsRUFDRjtZQUNFLEdBQUc7Z0JBQ0QsT0FBTyxJQUFJLENBQUM7WUFDZCxDQUFDO1NBQ0YsQ0FDRixDQUFDO1FBRUYsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxlQUFlLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDckUsQ0FBQztJQUVELGFBQWEsQ0FBQyxJQUFjO1FBQzFCLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDcEQsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQztZQUNyQixPQUFPLFFBQVEsQ0FBQztRQUNsQixDQUFDLEVBQUUsRUFBZ0MsQ0FBQyxDQUFDO1FBRXJDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsZUFBZSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7OEdBMUJVLHFCQUFxQjtrSEFBckIscUJBQXFCLGNBRnBCLE1BQU07O1NBRVAscUJBQXFCOzJGQUFyQixxQkFBcUI7a0JBSGpDLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uZmlnU3RhdGVTZXJ2aWNlLCBQZXJtaXNzaW9uU2VydmljZSB9IGZyb20gJ0BhYnAvbmcuY29yZSc7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBNb2NrUGVybWlzc2lvblNlcnZpY2UgZXh0ZW5kcyBQZXJtaXNzaW9uU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGNvbmZpZ1N0YXRlOiBDb25maWdTdGF0ZVNlcnZpY2UpIHtcclxuICAgIHN1cGVyKGNvbmZpZ1N0YXRlKTtcclxuICAgIHRoaXMuZ3JhbnRBbGxQb2xpY2llcygpO1xyXG4gIH1cclxuXHJcbiAgZ3JhbnRBbGxQb2xpY2llcygpIHtcclxuICAgIGNvbnN0IGdyYW50ZWRQb2xpY2llcyA9IG5ldyBQcm94eShcclxuICAgICAge30sXHJcbiAgICAgIHtcclxuICAgICAgICBnZXQoKSB7XHJcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9LFxyXG4gICAgICB9LFxyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLmNvbmZpZ1N0YXRlWydzdG9yZSddLmRlZXBQYXRjaCh7IGF1dGg6IHsgZ3JhbnRlZFBvbGljaWVzIH0gfSk7XHJcbiAgfVxyXG5cclxuICBncmFudFBvbGljaWVzKGtleXM6IHN0cmluZ1tdKSB7XHJcbiAgICBjb25zdCBncmFudGVkUG9saWNpZXMgPSBrZXlzLnJlZHVjZSgocG9saWNpZXMsIGtleSkgPT4ge1xyXG4gICAgICBwb2xpY2llc1trZXldID0gdHJ1ZTtcclxuICAgICAgcmV0dXJuIHBvbGljaWVzO1xyXG4gICAgfSwge30gYXMgeyBba2V5OiBzdHJpbmddOiBib29sZWFuIH0pO1xyXG5cclxuICAgIHRoaXMuY29uZmlnU3RhdGVbJ3N0b3JlJ10uZGVlcFBhdGNoKHsgYXV0aDogeyBncmFudGVkUG9saWNpZXMgfSB9KTtcclxuICB9XHJcbn1cclxuIl19