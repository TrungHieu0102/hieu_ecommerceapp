import { HttpClient } from '@angular/common/http';
import { of } from 'rxjs';
import { catchError, tap } from 'rxjs/operators';
import { EnvironmentService } from '../services/environment.service';
import { HttpErrorReporterService } from '../services/http-error-reporter.service';
import { deepMerge } from './object-utils';
export function getRemoteEnv(injector, environment) {
    const environmentService = injector.get(EnvironmentService);
    const { remoteEnv } = environment;
    const { headers = {}, method = 'GET', url } = remoteEnv || {};
    if (!url)
        return Promise.resolve();
    const http = injector.get(HttpClient);
    const httpErrorReporter = injector.get(HttpErrorReporterService);
    return http
        .request(method, url, { headers })
        .pipe(catchError(err => {
        httpErrorReporter.reportError(err);
        return of(null);
    }), // TODO: Consider get handle function from a provider
    tap(env => environmentService.setState(mergeEnvironments(environment, env || {}, remoteEnv))))
        .toPromise();
}
function mergeEnvironments(local, remote, config) {
    switch (config.mergeStrategy) {
        case 'deepmerge':
            return deepMerge(local, remote);
        case 'overwrite':
        case null:
        case undefined:
            return remote;
        default:
            return config.mergeStrategy(local, remote);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW52aXJvbm1lbnQtdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9saWIvdXRpbHMvZW52aXJvbm1lbnQtdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRWxELE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDMUIsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVqRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNyRSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUNuRixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0MsTUFBTSxVQUFVLFlBQVksQ0FBQyxRQUFrQixFQUFFLFdBQWlDO0lBQ2hGLE1BQU0sa0JBQWtCLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBRTVELE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxXQUFXLENBQUM7SUFDbEMsTUFBTSxFQUFFLE9BQU8sR0FBRyxFQUFFLEVBQUUsTUFBTSxHQUFHLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxTQUFTLElBQUssRUFBZ0IsQ0FBQztJQUM3RSxJQUFJLENBQUMsR0FBRztRQUFFLE9BQU8sT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBRW5DLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDdEMsTUFBTSxpQkFBaUIsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDLENBQUM7SUFFakUsT0FBTyxJQUFJO1NBQ1IsT0FBTyxDQUFjLE1BQU0sRUFBRSxHQUFHLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQztTQUM5QyxJQUFJLENBQ0gsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ2YsaUJBQWlCLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ25DLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xCLENBQUMsQ0FBQyxFQUFFLHFEQUFxRDtJQUN6RCxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FDUixrQkFBa0IsQ0FBQyxRQUFRLENBQ3pCLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxHQUFHLElBQUssRUFBa0IsRUFBRSxTQUFzQixDQUFDLENBQ25GLENBQ0YsQ0FDRjtTQUNBLFNBQVMsRUFBRSxDQUFDO0FBQ2pCLENBQUM7QUFFRCxTQUFTLGlCQUFpQixDQUN4QixLQUEyQixFQUMzQixNQUFtQixFQUNuQixNQUFpQjtJQUVqQixRQUFRLE1BQU0sQ0FBQyxhQUFhLEVBQUU7UUFDNUIsS0FBSyxXQUFXO1lBQ2QsT0FBTyxTQUFTLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBZ0IsQ0FBQztRQUNqRCxLQUFLLFdBQVcsQ0FBQztRQUNqQixLQUFLLElBQUksQ0FBQztRQUNWLEtBQUssU0FBUztZQUNaLE9BQU8sTUFBTSxDQUFDO1FBQ2hCO1lBQ0UsT0FBTyxNQUFNLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztLQUM5QztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBjYXRjaEVycm9yLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IEVudmlyb25tZW50LCBSZW1vdGVFbnYgfSBmcm9tICcuLi9tb2RlbHMvZW52aXJvbm1lbnQnO1xyXG5pbXBvcnQgeyBFbnZpcm9ubWVudFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9lbnZpcm9ubWVudC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgSHR0cEVycm9yUmVwb3J0ZXJTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvaHR0cC1lcnJvci1yZXBvcnRlci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgZGVlcE1lcmdlIH0gZnJvbSAnLi9vYmplY3QtdXRpbHMnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlbW90ZUVudihpbmplY3RvcjogSW5qZWN0b3IsIGVudmlyb25tZW50OiBQYXJ0aWFsPEVudmlyb25tZW50Pikge1xyXG4gIGNvbnN0IGVudmlyb25tZW50U2VydmljZSA9IGluamVjdG9yLmdldChFbnZpcm9ubWVudFNlcnZpY2UpO1xyXG5cclxuICBjb25zdCB7IHJlbW90ZUVudiB9ID0gZW52aXJvbm1lbnQ7XHJcbiAgY29uc3QgeyBoZWFkZXJzID0ge30sIG1ldGhvZCA9ICdHRVQnLCB1cmwgfSA9IHJlbW90ZUVudiB8fCAoe30gYXMgUmVtb3RlRW52KTtcclxuICBpZiAoIXVybCkgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG5cclxuICBjb25zdCBodHRwID0gaW5qZWN0b3IuZ2V0KEh0dHBDbGllbnQpO1xyXG4gIGNvbnN0IGh0dHBFcnJvclJlcG9ydGVyID0gaW5qZWN0b3IuZ2V0KEh0dHBFcnJvclJlcG9ydGVyU2VydmljZSk7XHJcblxyXG4gIHJldHVybiBodHRwXHJcbiAgICAucmVxdWVzdDxFbnZpcm9ubWVudD4obWV0aG9kLCB1cmwsIHsgaGVhZGVycyB9KVxyXG4gICAgLnBpcGUoXHJcbiAgICAgIGNhdGNoRXJyb3IoZXJyID0+IHtcclxuICAgICAgICBodHRwRXJyb3JSZXBvcnRlci5yZXBvcnRFcnJvcihlcnIpO1xyXG4gICAgICAgIHJldHVybiBvZihudWxsKTtcclxuICAgICAgfSksIC8vIFRPRE86IENvbnNpZGVyIGdldCBoYW5kbGUgZnVuY3Rpb24gZnJvbSBhIHByb3ZpZGVyXHJcbiAgICAgIHRhcChlbnYgPT5cclxuICAgICAgICBlbnZpcm9ubWVudFNlcnZpY2Uuc2V0U3RhdGUoXHJcbiAgICAgICAgICBtZXJnZUVudmlyb25tZW50cyhlbnZpcm9ubWVudCwgZW52IHx8ICh7fSBhcyBFbnZpcm9ubWVudCksIHJlbW90ZUVudiBhcyBSZW1vdGVFbnYpLFxyXG4gICAgICAgICksXHJcbiAgICAgICksXHJcbiAgICApXHJcbiAgICAudG9Qcm9taXNlKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1lcmdlRW52aXJvbm1lbnRzKFxyXG4gIGxvY2FsOiBQYXJ0aWFsPEVudmlyb25tZW50PixcclxuICByZW1vdGU6IEVudmlyb25tZW50LFxyXG4gIGNvbmZpZzogUmVtb3RlRW52LFxyXG4pOiBFbnZpcm9ubWVudCB7XHJcbiAgc3dpdGNoIChjb25maWcubWVyZ2VTdHJhdGVneSkge1xyXG4gICAgY2FzZSAnZGVlcG1lcmdlJzpcclxuICAgICAgcmV0dXJuIGRlZXBNZXJnZShsb2NhbCwgcmVtb3RlKSBhcyBFbnZpcm9ubWVudDtcclxuICAgIGNhc2UgJ292ZXJ3cml0ZSc6XHJcbiAgICBjYXNlIG51bGw6XHJcbiAgICBjYXNlIHVuZGVmaW5lZDpcclxuICAgICAgcmV0dXJuIHJlbW90ZTtcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiBjb25maWcubWVyZ2VTdHJhdGVneShsb2NhbCwgcmVtb3RlKTtcclxuICB9XHJcbn1cclxuIl19