import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * Abstract service for Authentication.
 */
class AuthService {
    warningMessage() {
        console.error('You should add @abp/ng-oauth packages or create your own auth packages.');
    }
    init() {
        this.warningMessage();
        return Promise.resolve(undefined);
    }
    login(params) {
        this.warningMessage();
        return of(undefined);
    }
    logout(queryParams) {
        this.warningMessage();
        return of(undefined);
    }
    navigateToLogin(queryParams) { }
    get isInternalAuth() {
        throw new Error('not implemented');
        return false;
    }
    get isAuthenticated() {
        this.warningMessage();
        return false;
    }
    loginUsingGrant(grantType, parameters, headers) {
        console.log({ grantType, parameters, headers });
        return Promise.reject(new Error('not implemented'));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.6", ngImport: i0, type: AuthService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.6", ngImport: i0, type: AuthService, providedIn: 'root' }); }
}
export { AuthService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.6", ngImport: i0, type: AuthService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvbGliL2Fic3RyYWN0cy9hdXRoLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDOztBQUl0Qzs7R0FFRztBQUNILE1BR2EsV0FBVztJQUNkLGNBQWM7UUFDcEIsT0FBTyxDQUFDLEtBQUssQ0FBQyx5RUFBeUUsQ0FBQyxDQUFDO0lBQzNGLENBQUM7SUFFRCxJQUFJO1FBQ0YsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3RCLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQsS0FBSyxDQUFDLE1BQW1CO1FBQ3ZCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN0QixPQUFPLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRUQsTUFBTSxDQUFDLFdBQW9CO1FBQ3pCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN0QixPQUFPLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRUQsZUFBZSxDQUFDLFdBQW9CLElBQVMsQ0FBQztJQUU5QyxJQUFJLGNBQWM7UUFDaEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ25DLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVELElBQUksZUFBZTtRQUNqQixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdEIsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsZUFBZSxDQUNiLFNBQWlCLEVBQ2pCLFVBQWtCLEVBQ2xCLE9BQXFCO1FBRXJCLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDaEQsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztJQUN0RCxDQUFDOzhHQXZDVSxXQUFXO2tIQUFYLFdBQVcsY0FGVixNQUFNOztTQUVQLFdBQVc7MkZBQVgsV0FBVztrQkFIdkIsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwSGVhZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBMb2dpblBhcmFtcyB9IGZyb20gJy4uL21vZGVscy9hdXRoJztcclxuaW1wb3J0IHsgQWJwQXV0aFJlc3BvbnNlIH0gZnJvbSAnLi9hdXRoLXJlc3BvbnNlLm1vZGVsJztcclxuXHJcbi8qKlxyXG4gKiBBYnN0cmFjdCBzZXJ2aWNlIGZvciBBdXRoZW50aWNhdGlvbi5cclxuICovXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBdXRoU2VydmljZSBpbXBsZW1lbnRzIElBdXRoU2VydmljZSB7XHJcbiAgcHJpdmF0ZSB3YXJuaW5nTWVzc2FnZSgpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ1lvdSBzaG91bGQgYWRkIEBhYnAvbmctb2F1dGggcGFja2FnZXMgb3IgY3JlYXRlIHlvdXIgb3duIGF1dGggcGFja2FnZXMuJyk7XHJcbiAgfVxyXG5cclxuICBpbml0KCk6IFByb21pc2U8YW55PiB7XHJcbiAgICB0aGlzLndhcm5pbmdNZXNzYWdlKCk7XHJcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCk7XHJcbiAgfVxyXG5cclxuICBsb2dpbihwYXJhbXM6IExvZ2luUGFyYW1zKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHRoaXMud2FybmluZ01lc3NhZ2UoKTtcclxuICAgIHJldHVybiBvZih1bmRlZmluZWQpO1xyXG4gIH1cclxuXHJcbiAgbG9nb3V0KHF1ZXJ5UGFyYW1zPzogUGFyYW1zKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHRoaXMud2FybmluZ01lc3NhZ2UoKTtcclxuICAgIHJldHVybiBvZih1bmRlZmluZWQpO1xyXG4gIH1cclxuXHJcbiAgbmF2aWdhdGVUb0xvZ2luKHF1ZXJ5UGFyYW1zPzogUGFyYW1zKTogdm9pZCB7fVxyXG5cclxuICBnZXQgaXNJbnRlcm5hbEF1dGgoKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCcpO1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGlzQXV0aGVudGljYXRlZCgpOiBib29sZWFuIHtcclxuICAgIHRoaXMud2FybmluZ01lc3NhZ2UoKTtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIGxvZ2luVXNpbmdHcmFudChcclxuICAgIGdyYW50VHlwZTogc3RyaW5nLFxyXG4gICAgcGFyYW1ldGVyczogb2JqZWN0LFxyXG4gICAgaGVhZGVycz86IEh0dHBIZWFkZXJzLFxyXG4gICk6IFByb21pc2U8QWJwQXV0aFJlc3BvbnNlPiB7XHJcbiAgICBjb25zb2xlLmxvZyh7IGdyYW50VHlwZSwgcGFyYW1ldGVycywgaGVhZGVycyB9KTtcclxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCcpKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUF1dGhTZXJ2aWNlIHtcclxuICBnZXQgaXNJbnRlcm5hbEF1dGgoKTogYm9vbGVhbjtcclxuXHJcbiAgZ2V0IGlzQXV0aGVudGljYXRlZCgpOiBib29sZWFuO1xyXG5cclxuICBpbml0KCk6IFByb21pc2U8YW55PjtcclxuXHJcbiAgbG9nb3V0KHF1ZXJ5UGFyYW1zPzogUGFyYW1zKTogT2JzZXJ2YWJsZTxhbnk+O1xyXG5cclxuICBuYXZpZ2F0ZVRvTG9naW4ocXVlcnlQYXJhbXM/OiBQYXJhbXMpOiB2b2lkO1xyXG5cclxuICBsb2dpbihwYXJhbXM6IExvZ2luUGFyYW1zKTogT2JzZXJ2YWJsZTxhbnk+O1xyXG5cclxuICBsb2dpblVzaW5nR3JhbnQoXHJcbiAgICBncmFudFR5cGU6IHN0cmluZyxcclxuICAgIHBhcmFtZXRlcnM6IG9iamVjdCxcclxuICAgIGhlYWRlcnM/OiBIdHRwSGVhZGVycyxcclxuICApOiBQcm9taXNlPEFicEF1dGhSZXNwb25zZT47XHJcbn1cclxuIl19