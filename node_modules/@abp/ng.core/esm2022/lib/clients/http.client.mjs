import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { IS_EXTERNAL_REQUEST } from '../tokens/http-context.token';
import * as i0 from "@angular/core";
// source : https://github.com/armanozak/demo-angular-server-specific-interceptors
class ExternalHttpClient extends HttpClient {
    request(first, url, options = {}) {
        if (typeof first === 'string') {
            this.#setPlaceholderContext(options);
            return super.request(first, url || '', options);
        }
        this.#setPlaceholderContext(first);
        return super.request(first);
    }
    #setPlaceholderContext(optionsOrRequest) {
        optionsOrRequest.context ??= new HttpContext();
        optionsOrRequest.context.set(IS_EXTERNAL_REQUEST, true);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.6", ngImport: i0, type: ExternalHttpClient, deps: null, target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.6", ngImport: i0, type: ExternalHttpClient, providedIn: 'root' }); }
}
export { ExternalHttpClient };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.6", ngImport: i0, type: ExternalHttpClient, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC5jbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9saWIvY2xpZW50cy9odHRwLmNsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBZSxNQUFNLHNCQUFzQixDQUFDO0FBQzVFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sOEJBQThCLENBQUM7O0FBRW5FLGtGQUFrRjtBQUNsRixNQUdhLGtCQUFtQixTQUFRLFVBQVU7SUFDdkMsT0FBTyxDQUNkLEtBQWdDLEVBQ2hDLEdBQVksRUFDWixVQUEwQixFQUFFO1FBRTVCLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQzdCLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNyQyxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsSUFBSSxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDakQ7UUFFRCxJQUFJLENBQUMsc0JBQXNCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkMsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFDRCxzQkFBc0IsQ0FBQyxnQkFBMkM7UUFDaEUsZ0JBQWdCLENBQUMsT0FBTyxLQUFLLElBQUksV0FBVyxFQUFFLENBQUM7UUFDL0MsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMxRCxDQUFDOzhHQWpCVSxrQkFBa0I7a0hBQWxCLGtCQUFrQixjQUZqQixNQUFNOztTQUVQLGtCQUFrQjsyRkFBbEIsa0JBQWtCO2tCQUg5QixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBDb250ZXh0LCBIdHRwUmVxdWVzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IElTX0VYVEVSTkFMX1JFUVVFU1QgfSBmcm9tICcuLi90b2tlbnMvaHR0cC1jb250ZXh0LnRva2VuJztcclxuXHJcbi8vIHNvdXJjZSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9hcm1hbm96YWsvZGVtby1hbmd1bGFyLXNlcnZlci1zcGVjaWZpYy1pbnRlcmNlcHRvcnNcclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290JyxcclxufSlcclxuZXhwb3J0IGNsYXNzIEV4dGVybmFsSHR0cENsaWVudCBleHRlbmRzIEh0dHBDbGllbnQge1xyXG4gIG92ZXJyaWRlIHJlcXVlc3QoXHJcbiAgICBmaXJzdDogc3RyaW5nIHwgSHR0cFJlcXVlc3Q8YW55PixcclxuICAgIHVybD86IHN0cmluZyxcclxuICAgIG9wdGlvbnM6IFJlcXVlc3RPcHRpb25zID0ge30sXHJcbiAgKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGlmICh0eXBlb2YgZmlyc3QgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIHRoaXMuI3NldFBsYWNlaG9sZGVyQ29udGV4dChvcHRpb25zKTtcclxuICAgICAgcmV0dXJuIHN1cGVyLnJlcXVlc3QoZmlyc3QsIHVybCB8fCAnJywgb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy4jc2V0UGxhY2Vob2xkZXJDb250ZXh0KGZpcnN0KTtcclxuICAgIHJldHVybiBzdXBlci5yZXF1ZXN0KGZpcnN0KTtcclxuICB9XHJcbiAgI3NldFBsYWNlaG9sZGVyQ29udGV4dChvcHRpb25zT3JSZXF1ZXN0OiB7IGNvbnRleHQ/OiBIdHRwQ29udGV4dCB9KSB7XHJcbiAgICBvcHRpb25zT3JSZXF1ZXN0LmNvbnRleHQgPz89IG5ldyBIdHRwQ29udGV4dCgpO1xyXG4gICAgb3B0aW9uc09yUmVxdWVzdC5jb250ZXh0LnNldChJU19FWFRFUk5BTF9SRVFVRVNULCB0cnVlKTtcclxuICB9XHJcbn1cclxuXHJcbnR5cGUgUmVxdWVzdE9wdGlvbnMgPSBQYXJhbWV0ZXJzPEh0dHBDbGllbnRbJ3JlcXVlc3QnXT5bMl07XHJcbiJdfQ==