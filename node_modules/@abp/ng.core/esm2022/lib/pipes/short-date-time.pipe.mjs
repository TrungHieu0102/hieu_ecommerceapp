import { DatePipe, DATE_PIPE_DEFAULT_TIMEZONE } from '@angular/common';
import { Inject, LOCALE_ID, Optional, Pipe } from '@angular/core';
import { ConfigStateService } from '../services';
import { getShortDateShortTimeFormat } from '../utils/date-utils';
import * as i0 from "@angular/core";
import * as i1 from "../services";
class ShortDateTimePipe extends DatePipe {
    constructor(configStateService, locale, defaultTimezone) {
        super(locale, defaultTimezone);
        this.configStateService = configStateService;
    }
    transform(value, timezone, locale) {
        const format = getShortDateShortTimeFormat(this.configStateService);
        return super.transform(value, format, timezone, locale);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.6", ngImport: i0, type: ShortDateTimePipe, deps: [{ token: i1.ConfigStateService }, { token: LOCALE_ID }, { token: DATE_PIPE_DEFAULT_TIMEZONE, optional: true }], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "16.0.6", ngImport: i0, type: ShortDateTimePipe, name: "shortDateTime" }); }
}
export { ShortDateTimePipe };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.6", ngImport: i0, type: ShortDateTimePipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'shortDateTime',
                    pure: true,
                }]
        }], ctorParameters: function () { return [{ type: i1.ConfigStateService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DATE_PIPE_DEFAULT_TIMEZONE]
                }, {
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvcnQtZGF0ZS10aW1lLnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9saWIvcGlwZXMvc2hvcnQtZGF0ZS10aW1lLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNqRCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7O0FBRWxFLE1BSWEsaUJBQWtCLFNBQVEsUUFBUTtJQUU3QyxZQUFvQixrQkFBc0MsRUFDckMsTUFBYyxFQUNnQixlQUE2QjtRQUU5RSxLQUFLLENBQUMsTUFBTSxFQUFFLGVBQWUsQ0FBQyxDQUFBO1FBSlosdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtJQUsxRCxDQUFDO0lBSUQsU0FBUyxDQUNQLEtBQXdDLEVBQUUsUUFBaUIsRUFDM0QsTUFBZTtRQUVqQixNQUFNLE1BQU0sR0FBRywyQkFBMkIsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUNwRSxPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFDLE1BQU0sRUFBQyxRQUFRLEVBQUMsTUFBTSxDQUFDLENBQUE7SUFDcEQsQ0FBQzs4R0FqQlUsaUJBQWlCLG9EQUdsQixTQUFTLGFBQ1QsMEJBQTBCOzRHQUp6QixpQkFBaUI7O1NBQWpCLGlCQUFpQjsyRkFBakIsaUJBQWlCO2tCQUo3QixJQUFJO21CQUFDO29CQUNKLElBQUksRUFBRSxlQUFlO29CQUNyQixJQUFJLEVBQUUsSUFBSTtpQkFDWDs7MEJBSUksTUFBTTsyQkFBQyxTQUFTOzswQkFDaEIsTUFBTTsyQkFBQywwQkFBMEI7OzBCQUFHLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYXRlUGlwZSwgREFURV9QSVBFX0RFRkFVTFRfVElNRVpPTkUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBJbmplY3QsIExPQ0FMRV9JRCwgT3B0aW9uYWwsIFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29uZmlnU3RhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMnO1xyXG5pbXBvcnQgeyBnZXRTaG9ydERhdGVTaG9ydFRpbWVGb3JtYXQgfSBmcm9tICcuLi91dGlscy9kYXRlLXV0aWxzJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnc2hvcnREYXRlVGltZScsXHJcbiAgcHVyZTogdHJ1ZSxcclxufSlcclxuZXhwb3J0IGNsYXNzIFNob3J0RGF0ZVRpbWVQaXBlIGV4dGVuZHMgRGF0ZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjb25maWdTdGF0ZVNlcnZpY2U6IENvbmZpZ1N0YXRlU2VydmljZSxcclxuICAgIEBJbmplY3QoTE9DQUxFX0lEKSBsb2NhbGU6IHN0cmluZyxcclxuICAgIEBJbmplY3QoREFURV9QSVBFX0RFRkFVTFRfVElNRVpPTkUpIEBPcHRpb25hbCgpICBkZWZhdWx0VGltZXpvbmU/OiBzdHJpbmd8bnVsbFxyXG4gICAgKSB7XHJcbiAgICBzdXBlcihsb2NhbGUsIGRlZmF1bHRUaW1lem9uZSlcclxuICB9XHJcblxyXG4gIHRyYW5zZm9ybSh2YWx1ZTogRGF0ZSB8IHN0cmluZyB8IG51bWJlciwgZm9ybWF0Pzogc3RyaW5nLCB0aW1lem9uZT86IHN0cmluZywgbG9jYWxlPzogc3RyaW5nKTogc3RyaW5nIHwgbnVsbDtcclxuICB0cmFuc2Zvcm0odmFsdWU6IG51bGwgfCB1bmRlZmluZWQsIGZvcm1hdD86IHN0cmluZywgdGltZXpvbmU/OiBzdHJpbmcsIGxvY2FsZT86IHN0cmluZyk6IG51bGw7XHJcbiAgdHJhbnNmb3JtKFxyXG4gICAgdmFsdWU6IHN0cmluZ3xudW1iZXJ8RGF0ZXxudWxsfHVuZGVmaW5lZCwgdGltZXpvbmU/OiBzdHJpbmcsXHJcbiAgICBsb2NhbGU/OiBzdHJpbmcpOiBzdHJpbmd8bnVsbCB7XHJcblxyXG4gIGNvbnN0IGZvcm1hdCA9IGdldFNob3J0RGF0ZVNob3J0VGltZUZvcm1hdCh0aGlzLmNvbmZpZ1N0YXRlU2VydmljZSk7XHJcbiAgcmV0dXJuIHN1cGVyLnRyYW5zZm9ybSh2YWx1ZSxmb3JtYXQsdGltZXpvbmUsbG9jYWxlKVxyXG4gIH1cclxuXHJcblxyXG59XHJcblxyXG5cclxuIl19