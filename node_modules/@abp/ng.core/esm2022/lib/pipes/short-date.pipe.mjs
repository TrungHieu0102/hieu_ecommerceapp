import { DatePipe, DATE_PIPE_DEFAULT_TIMEZONE } from '@angular/common';
import { Inject, LOCALE_ID, Optional, Pipe } from '@angular/core';
import { ConfigStateService } from '../services';
import { getShortDateFormat } from '../utils/date-utils';
import * as i0 from "@angular/core";
import * as i1 from "../services";
class ShortDatePipe extends DatePipe {
    constructor(configStateService, locale, defaultTimezone) {
        super(locale, defaultTimezone);
        this.configStateService = configStateService;
    }
    transform(value, timezone, locale) {
        const format = getShortDateFormat(this.configStateService);
        return super.transform(value, format, timezone, locale);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.6", ngImport: i0, type: ShortDatePipe, deps: [{ token: i1.ConfigStateService }, { token: LOCALE_ID }, { token: DATE_PIPE_DEFAULT_TIMEZONE, optional: true }], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "16.0.6", ngImport: i0, type: ShortDatePipe, name: "shortDate" }); }
}
export { ShortDatePipe };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.6", ngImport: i0, type: ShortDatePipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'shortDate',
                    pure: true,
                }]
        }], ctorParameters: function () { return [{ type: i1.ConfigStateService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DATE_PIPE_DEFAULT_TIMEZONE]
                }, {
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvcnQtZGF0ZS5waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvbGliL3BpcGVzL3Nob3J0LWRhdGUucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLDBCQUEwQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDdkUsT0FBTyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDakYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ2pELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDOzs7QUFFekQsTUFJYSxhQUFjLFNBQVEsUUFBUTtJQUV6QyxZQUFvQixrQkFBc0MsRUFDckMsTUFBYyxFQUNnQixlQUE2QjtRQUU5RSxLQUFLLENBQUMsTUFBTSxFQUFFLGVBQWUsQ0FBQyxDQUFBO1FBSlosdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtJQUsxRCxDQUFDO0lBSUQsU0FBUyxDQUNQLEtBQXdDLEVBQUUsUUFBaUIsRUFDM0QsTUFBZTtRQUVqQixNQUFNLE1BQU0sR0FBRyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUMzRCxPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFDLE1BQU0sRUFBQyxRQUFRLEVBQUMsTUFBTSxDQUFDLENBQUE7SUFDcEQsQ0FBQzs4R0FqQlUsYUFBYSxvREFHZCxTQUFTLGFBQ1QsMEJBQTBCOzRHQUp6QixhQUFhOztTQUFiLGFBQWE7MkZBQWIsYUFBYTtrQkFKekIsSUFBSTttQkFBQztvQkFDSixJQUFJLEVBQUUsV0FBVztvQkFDakIsSUFBSSxFQUFFLElBQUk7aUJBQ1g7OzBCQUlJLE1BQU07MkJBQUMsU0FBUzs7MEJBQ2hCLE1BQU07MkJBQUMsMEJBQTBCOzswQkFBRyxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGF0ZVBpcGUsIERBVEVfUElQRV9ERUZBVUxUX1RJTUVaT05FIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgSW5qZWN0LCBMT0NBTEVfSUQsIE9wdGlvbmFsLCBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbmZpZ1N0YXRlU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzJztcclxuaW1wb3J0IHsgZ2V0U2hvcnREYXRlRm9ybWF0IH0gZnJvbSAnLi4vdXRpbHMvZGF0ZS11dGlscyc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ3Nob3J0RGF0ZScsXHJcbiAgcHVyZTogdHJ1ZSxcclxufSlcclxuZXhwb3J0IGNsYXNzIFNob3J0RGF0ZVBpcGUgZXh0ZW5kcyBEYXRlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbmZpZ1N0YXRlU2VydmljZTogQ29uZmlnU3RhdGVTZXJ2aWNlLFxyXG4gICAgQEluamVjdChMT0NBTEVfSUQpIGxvY2FsZTogc3RyaW5nLFxyXG4gICAgQEluamVjdChEQVRFX1BJUEVfREVGQVVMVF9USU1FWk9ORSkgQE9wdGlvbmFsKCkgIGRlZmF1bHRUaW1lem9uZT86IHN0cmluZ3xudWxsXHJcbiAgICApIHtcclxuICAgIHN1cGVyKGxvY2FsZSwgZGVmYXVsdFRpbWV6b25lKVxyXG4gIH1cclxuXHJcbiAgdHJhbnNmb3JtKHZhbHVlOiBEYXRlIHwgc3RyaW5nIHwgbnVtYmVyLCBmb3JtYXQ/OiBzdHJpbmcsIHRpbWV6b25lPzogc3RyaW5nLCBsb2NhbGU/OiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsO1xyXG4gIHRyYW5zZm9ybSh2YWx1ZTogbnVsbCB8IHVuZGVmaW5lZCwgZm9ybWF0Pzogc3RyaW5nLCB0aW1lem9uZT86IHN0cmluZywgbG9jYWxlPzogc3RyaW5nKTogbnVsbDtcclxuICB0cmFuc2Zvcm0oXHJcbiAgICB2YWx1ZTogc3RyaW5nfG51bWJlcnxEYXRlfG51bGx8dW5kZWZpbmVkLCB0aW1lem9uZT86IHN0cmluZyxcclxuICAgIGxvY2FsZT86IHN0cmluZyk6IHN0cmluZ3xudWxsIHtcclxuXHJcbiAgY29uc3QgZm9ybWF0ID0gZ2V0U2hvcnREYXRlRm9ybWF0KHRoaXMuY29uZmlnU3RhdGVTZXJ2aWNlKTtcclxuICByZXR1cm4gc3VwZXIudHJhbnNmb3JtKHZhbHVlLGZvcm1hdCx0aW1lem9uZSxsb2NhbGUpXHJcbiAgfVxyXG5cclxuXHJcbn1cclxuXHJcblxyXG4iXX0=