import { differentLocales } from '@abp/ng.core';
import { isDevMode } from '@angular/core';
let localeMap = {};
export function registerLocale({ cultureNameLocaleFileMap = {}, errorHandlerFn = defaultLocalErrorHandlerFn, } = {}) {
    return (locale) => {
        localeMap = { ...differentLocales, ...cultureNameLocaleFileMap };
        const localePath = `/locales/${localeMap[locale] || locale}`;
        return new Promise((resolve, reject) => {
            return import(
            /* webpackMode: "lazy-once" */
            /* webpackChunkName: "locales"*/
            /* webpackInclude: /[/\\](ar|cs|en|en-GB|es|de|fi|fr|hi|hu|is|it|pt|tr|ru|ro|sk|sl|zh-Hans|zh-Hant)\.(mjs|js)$/ */
            /* webpackExclude: /[/\\]global|extra/ */
            `@angular/common${localePath}`)
                .then(val => {
                let module = val;
                while (module.default) {
                    module = module.default;
                }
                resolve({ default: module });
            })
                .catch(error => {
                errorHandlerFn({
                    resolve,
                    reject,
                    error,
                    locale,
                });
            });
        });
    };
}
const extraLocales = {};
export function storeLocaleData(data, localeId) {
    extraLocales[localeId] = data;
}
export async function defaultLocalErrorHandlerFn({ locale, resolve }) {
    if (extraLocales[locale]) {
        resolve({ default: extraLocales[localeMap[locale] || locale] });
        return;
    }
    if (isDevMode()) {
        console.error(`Cannot find the ${locale} locale file. You can check how can add new culture at https://docs.abp.io/en/abp/latest/UI/Angular/Localization#adding-a-new-culture`);
    }
    resolve();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXItbG9jYWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9sb2NhbGUvc3JjL3V0aWxzL3JlZ2lzdGVyLWxvY2FsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDaEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQVMxQyxJQUFJLFNBQVMsR0FBRyxFQUErQixDQUFDO0FBT2hELE1BQU0sVUFBVSxjQUFjLENBQzVCLEVBQ0Usd0JBQXdCLEdBQUcsRUFBRSxFQUM3QixjQUFjLEdBQUcsMEJBQTBCLE1BQ3pDLEVBQXdCO0lBRTVCLE9BQU8sQ0FBQyxNQUFjLEVBQWdCLEVBQUU7UUFDdEMsU0FBUyxHQUFHLEVBQUUsR0FBRyxnQkFBZ0IsRUFBRSxHQUFHLHdCQUF3QixFQUFFLENBQUM7UUFDakUsTUFBTSxVQUFVLEdBQUcsWUFBWSxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksTUFBTSxFQUFFLENBQUM7UUFDN0QsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNyQyxPQUFPLE1BQU07WUFDWCw4QkFBOEI7WUFDOUIsZ0NBQWdDO1lBQ2hDLGtIQUFrSDtZQUNsSCx5Q0FBeUM7WUFDekMsa0JBQWtCLFVBQVUsRUFBRSxDQUMvQjtpQkFDRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ1YsSUFBSSxNQUFNLEdBQUcsR0FBRyxDQUFDO2dCQUNqQixPQUFPLE1BQU0sQ0FBQyxPQUFPLEVBQUU7b0JBQ3JCLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO2lCQUN6QjtnQkFDRCxPQUFPLENBQUMsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztZQUMvQixDQUFDLENBQUM7aUJBQ0QsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNiLGNBQWMsQ0FBQztvQkFDYixPQUFPO29CQUNQLE1BQU07b0JBQ04sS0FBSztvQkFDTCxNQUFNO2lCQUNQLENBQUMsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxZQUFZLEdBQUcsRUFBNEIsQ0FBQztBQUNsRCxNQUFNLFVBQVUsZUFBZSxDQUFDLElBQVMsRUFBRSxRQUFnQjtJQUN6RCxZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDO0FBQ2hDLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLDBCQUEwQixDQUFDLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBMEI7SUFDMUYsSUFBSSxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDeEIsT0FBTyxDQUFDLEVBQUUsT0FBTyxFQUFFLFlBQVksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hFLE9BQU87S0FDUjtJQUVELElBQUksU0FBUyxFQUFFLEVBQUU7UUFDZixPQUFPLENBQUMsS0FBSyxDQUNYLG1CQUFtQixNQUFNLHVJQUF1SSxDQUNqSyxDQUFDO0tBQ0g7SUFFRCxPQUFPLEVBQUUsQ0FBQztBQUNaLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkaWZmZXJlbnRMb2NhbGVzIH0gZnJvbSAnQGFicC9uZy5jb3JlJztcclxuaW1wb3J0IHsgaXNEZXZNb2RlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIExvY2FsZUVycm9ySGFuZGxlckRhdGEge1xyXG4gIHJlc29sdmU6IGFueTtcclxuICByZWplY3Q6IGFueTtcclxuICBlcnJvcjogYW55O1xyXG4gIGxvY2FsZTogc3RyaW5nO1xyXG59XHJcblxyXG5sZXQgbG9jYWxlTWFwID0ge30gYXMgeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmVnaXN0ZXJMb2NhbGVEYXRhIHtcclxuICBjdWx0dXJlTmFtZUxvY2FsZUZpbGVNYXA/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xyXG4gIGVycm9ySGFuZGxlckZuPzogKGRhdGE6IExvY2FsZUVycm9ySGFuZGxlckRhdGEpID0+IGFueTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyTG9jYWxlKFxyXG4gIHtcclxuICAgIGN1bHR1cmVOYW1lTG9jYWxlRmlsZU1hcCA9IHt9LFxyXG4gICAgZXJyb3JIYW5kbGVyRm4gPSBkZWZhdWx0TG9jYWxFcnJvckhhbmRsZXJGbixcclxuICB9ID0ge30gYXMgUmVnaXN0ZXJMb2NhbGVEYXRhLFxyXG4pIHtcclxuICByZXR1cm4gKGxvY2FsZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+ID0+IHtcclxuICAgIGxvY2FsZU1hcCA9IHsgLi4uZGlmZmVyZW50TG9jYWxlcywgLi4uY3VsdHVyZU5hbWVMb2NhbGVGaWxlTWFwIH07XHJcbiAgICBjb25zdCBsb2NhbGVQYXRoID0gYC9sb2NhbGVzLyR7bG9jYWxlTWFwW2xvY2FsZV0gfHwgbG9jYWxlfWA7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICByZXR1cm4gaW1wb3J0KFxyXG4gICAgICAgIC8qIHdlYnBhY2tNb2RlOiBcImxhenktb25jZVwiICovXHJcbiAgICAgICAgLyogd2VicGFja0NodW5rTmFtZTogXCJsb2NhbGVzXCIqL1xyXG4gICAgICAgIC8qIHdlYnBhY2tJbmNsdWRlOiAvWy9cXFxcXShhcnxjc3xlbnxlbi1HQnxlc3xkZXxmaXxmcnxoaXxodXxpc3xpdHxwdHx0cnxydXxyb3xza3xzbHx6aC1IYW5zfHpoLUhhbnQpXFwuKG1qc3xqcykkLyAqL1xyXG4gICAgICAgIC8qIHdlYnBhY2tFeGNsdWRlOiAvWy9cXFxcXWdsb2JhbHxleHRyYS8gKi9cclxuICAgICAgICBgQGFuZ3VsYXIvY29tbW9uJHtsb2NhbGVQYXRofWBcclxuICAgICAgKVxyXG4gICAgICAgIC50aGVuKHZhbCA9PiB7XHJcbiAgICAgICAgICBsZXQgbW9kdWxlID0gdmFsO1xyXG4gICAgICAgICAgd2hpbGUgKG1vZHVsZS5kZWZhdWx0KSB7XHJcbiAgICAgICAgICAgIG1vZHVsZSA9IG1vZHVsZS5kZWZhdWx0O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmVzb2x2ZSh7IGRlZmF1bHQ6IG1vZHVsZSB9KTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaChlcnJvciA9PiB7XHJcbiAgICAgICAgICBlcnJvckhhbmRsZXJGbih7XHJcbiAgICAgICAgICAgIHJlc29sdmUsXHJcbiAgICAgICAgICAgIHJlamVjdCxcclxuICAgICAgICAgICAgZXJyb3IsXHJcbiAgICAgICAgICAgIGxvY2FsZSxcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfTtcclxufVxyXG5cclxuY29uc3QgZXh0cmFMb2NhbGVzID0ge30gYXMgeyBba2V5OiBzdHJpbmddOiBhbnkgfTtcclxuZXhwb3J0IGZ1bmN0aW9uIHN0b3JlTG9jYWxlRGF0YShkYXRhOiBhbnksIGxvY2FsZUlkOiBzdHJpbmcpIHtcclxuICBleHRyYUxvY2FsZXNbbG9jYWxlSWRdID0gZGF0YTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlZmF1bHRMb2NhbEVycm9ySGFuZGxlckZuKHsgbG9jYWxlLCByZXNvbHZlIH06IExvY2FsZUVycm9ySGFuZGxlckRhdGEpIHtcclxuICBpZiAoZXh0cmFMb2NhbGVzW2xvY2FsZV0pIHtcclxuICAgIHJlc29sdmUoeyBkZWZhdWx0OiBleHRyYUxvY2FsZXNbbG9jYWxlTWFwW2xvY2FsZV0gfHwgbG9jYWxlXSB9KTtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIGlmIChpc0Rldk1vZGUoKSkge1xyXG4gICAgY29uc29sZS5lcnJvcihcclxuICAgICAgYENhbm5vdCBmaW5kIHRoZSAke2xvY2FsZX0gbG9jYWxlIGZpbGUuIFlvdSBjYW4gY2hlY2sgaG93IGNhbiBhZGQgbmV3IGN1bHR1cmUgYXQgaHR0cHM6Ly9kb2NzLmFicC5pby9lbi9hYnAvbGF0ZXN0L1VJL0FuZ3VsYXIvTG9jYWxpemF0aW9uI2FkZGluZy1hLW5ldy1jdWx0dXJlYCxcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICByZXNvbHZlKCk7XHJcbn1cclxuIl19